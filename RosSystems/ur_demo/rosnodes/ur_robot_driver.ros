PackageSet {
	CatkinPackage ur_robot_driver{
		Artifact  ur_robot_driver_node {
		 Node { name ur_hardware_interface 
	        ServiceServers {
	          ServiceServer { name 'ur_hardware_interface/dashboard/close_safety_popup' service 'std_srvs.Trigger'},
	          ServiceServer { name 'controller_manager/unload_controller' service 'controller_manager_msgs.UnloadController'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/clear_operational_mode' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/restart_safety' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/hand_back_control' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/set_payload' service 'ur_msgs.SetPayload'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/load_installation' service 'ur_dashboard_msgs.Load'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/load_program' service 'ur_dashboard_msgs.Load'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/shutdown' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/program_running' service 'ur_dashboard_msgs.IsProgramRunning'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/power_off' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/set_io' service 'ur_msgs.SetIO'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/program_saved' service 'ur_dashboard_msgs.IsProgramSaved'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/connect' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/get_safety_mode' service 'ur_dashboard_msgs.GetSafetyMode'},
	          ServiceServer { name 'controller_manager/switch_controller' service 'controller_manager_msgs.SwitchController'},
	          ServiceServer { name 'controller_manager/list_controller_types' service 'controller_manager_msgs.ListControllerTypes'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/add_to_log' service 'ur_dashboard_msgs.AddToLog'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/popup' service 'ur_dashboard_msgs.Popup'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/play' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/close_popup' service 'std_srvs.Trigger'},
	          ServiceServer { name 'controller_manager/reload_controller_libraries' service 'controller_manager_msgs.ReloadControllerLibraries'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/raw_request' service 'ur_dashboard_msgs.RawRequest'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/pause' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/power_on' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/unlock_protective_stop' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/brake_release' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/program_state' service 'ur_dashboard_msgs.GetProgramState'},
	          ServiceServer { name 'scaled_pos_joint_traj_controller/query_state' service 'control_msgs.QueryTrajectoryState'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/get_robot_mode' service 'ur_dashboard_msgs.GetRobotMode'},
	          ServiceServer { name 'controller_manager/load_controller' service 'controller_manager_msgs.LoadController'},
	          ServiceServer { name 'pos_joint_traj_controller/query_state' service 'control_msgs.QueryTrajectoryState'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/quit' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/stop' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/set_speed_slider' service 'ur_msgs.SetSpeedSliderFraction'},
	          ServiceServer { name 'ur_hardware_interface/zero_ftsensor' service 'std_srvs.Trigger'},
	          ServiceServer { name 'ur_hardware_interface/dashboard/get_loaded_program' service 'ur_dashboard_msgs.GetLoadedProgram'},
	          ServiceServer { name 'controller_manager/list_controllers' service 'controller_manager_msgs.ListControllers'}}
	        Publishers {
	          Publisher { name 'ur_hardware_interface/safety_mode' message 'ur_dashboard_msgs.SafetyMode'},
	          Publisher { name 'pos_joint_traj_controller/state' message 'control_msgs.JointTrajectoryControllerState'},
	          Publisher { name 'ur_hardware_interface/tool_data' message 'ur_msgs.ToolDataMsg'},
	          Publisher { name 'scaled_pos_joint_traj_controller/state' message 'control_msgs.JointTrajectoryControllerState'},
	          Publisher { name 'ur_hardware_interface/robot_program_running' message 'std_msgs.Bool'},
	          Publisher { name 'speed_scaling_factor' message 'std_msgs.Float64'},
	          Publisher { name 'ur_hardware_interface/io_states' message 'ur_msgs.IOStates'},
	          Publisher { name 'ur_hardware_interface/robot_mode' message 'ur_dashboard_msgs.RobotMode'},
	          Publisher { name 'joint_states' message 'sensor_msgs.JointState'},
	          Publisher { name 'wrench' message 'geometry_msgs.WrenchStamped'}}
	        Subscribers {
	          Subscriber { name 'ur_hardware_interface/script_command' message 'std_msgs.String'},
	          Subscriber { name 'joint_group_vel_controller/command' message 'std_msgs.Float64MultiArray'},
	          Subscriber { name 'scaled_pos_joint_traj_controller/command' message 'trajectory_msgs.JointTrajectory'},
	          Subscriber { name 'pos_joint_traj_controller/command' message 'trajectory_msgs.JointTrajectory'}}
	        ActionServers {
	          ActionServer { name 'pos_joint_traj_controller/follow_joint_trajectory' action 'control_msgs.FollowJointTrajectory'},
	          ActionServer { name 'scaled_pos_joint_traj_controller/follow_joint_trajectory' action 'control_msgs.FollowJointTrajectory'}}
	        Parameters {
	          Parameter { name 'script_sender_port' type Integer },
	          Parameter { name 'use_tool_communication' type Boolean },
	          Parameter { name 'tf_prefix' type String },
	          Parameter { name 'input_recipe_file' type String },
	          Parameter { name 'script_file' type String },
	          Parameter { name 'robot_ip' type String },
	          Parameter { name 'tool_tx_idle_chars' type Double },
	          Parameter { name 'tool_stop_bits' type Integer },
	          Parameter { name 'output_recipe_file' type String },
	          Parameter { name 'tool_rx_idle_chars' type Double },
	          Parameter { name 'tool_voltage' type Integer },
	          Parameter { name 'tool_baud_rate' type Integer },
	          Parameter { name 'tool_parity' type Integer },
	          Parameter { name 'reverse_port' type Integer },
	          Parameter { name 'headless_mode' type Boolean },
	          //Parameter { name 'kinematics/wrist_2/z' type Double },
	          //Parameter { name 'kinematics/wrist_3/y' type Double },
	          //Parameter { name 'kinematics/shoulder/pitch' type Integer },
	          //Parameter { name 'kinematics/wrist_3/roll' type Double },
	          //Parameter { name 'kinematics/wrist_3/z' type Double },
	          //Parameter { name 'kinematics/upper_arm/z' type Integer },
	          //Parameter { name 'kinematics/shoulder/z' type Double },
	          //Parameter { name 'kinematics/wrist_2/yaw' type Integer },
	          //Parameter { name 'kinematics/shoulder/roll' type Integer },
	          //Parameter { name 'kinematics/wrist_2/pitch' type Integer },
	          //Parameter { name 'kinematics/forearm/pitch' type Integer },
	          //Parameter { name 'kinematics/wrist_2/x' type Integer },
	          //Parameter { name 'kinematics/wrist_3/x' type Integer },
	          //Parameter { name 'kinematics/forearm/y' type Integer },
	          //Parameter { name 'kinematics/wrist_2/roll' type Double },
	          //Parameter { name 'kinematics/hash' type String },
	          //Parameter { name 'kinematics/wrist_1/yaw' type Integer },
	          //Parameter { name 'kinematics/forearm/yaw' type Integer },
	          //Parameter { name 'kinematics/wrist_1/pitch' type Integer },
	          //Parameter { name 'kinematics/wrist_1/y' type Integer },
	          //Parameter { name 'kinematics/forearm/x' type Double },
	          //Parameter { name 'kinematics/upper_arm/roll' type Double },
	          //Parameter { name 'kinematics/wrist_1/x' type Double },
	          //Parameter { name 'kinematics/upper_arm/yaw' type Integer },
	          //Parameter { name 'kinematics/shoulder/y' type Integer },
	          //Parameter { name 'kinematics/wrist_1/z' type Double },
	          //Parameter { name 'kinematics/forearm/roll' type Integer },
	          //Parameter { name 'kinematics/upper_arm/pitch' type Integer },
	          //Parameter { name 'kinematics/wrist_2/y' type Double },
	          //Parameter { name 'kinematics/upper_arm/y' type Integer },
	          //Parameter { name 'kinematics/wrist_1/roll' type Integer },
	          //Parameter { name 'kinematics/upper_arm/x' type Integer },
	          //Parameter { name 'kinematics/forearm/z' type Integer },
	          //Parameter { name 'kinematics/wrist_3/pitch' type Double },
	          //Parameter { name 'kinematics/shoulder/x' type Integer },
	          //Parameter { name 'kinematics/wrist_3/yaw' type Double },
	          //Parameter { name 'kinematics/shoulder/yaw' type Integer },
	          Parameter { name 'kinematics' type Struct 
	          	{ shoulder Struct {
	          		x Double,
	          		y Double,
	          		z Double,
	          		roll Double,
	          		pitch Double,
	          		yaw Double},
	          	upper_arm Struct {
	          		x Double,
	          		y Double,
	          		z Double,
	          		roll Double,
	          		pitch Double,
	          		yaw Double},
	          	forearm Struct {
	          		x Double,
	          		y Double,
	          		z Double,
	          		roll Double,
	          		pitch Double,
	          		yaw Double},
	          	wrist_1 Struct {
	          		x Double,
	          		y Double,
	          		z Double,
	          		roll Double,
	          		pitch Double,
	          		yaw Double},
	          	wrist_2 Struct {
	          		x Double,
	          		y Double,
	          		z Double,
	          		roll Double,
	          		pitch Double,
	          		yaw Double},
	          	wrist_3 Struct {
	          		x Double,
	          		y Double,
	          		z Double,
	          		roll Double,
	          		pitch Double,
	          		yaw Double},
	            hash String
	          	}}}
}},
	Artifact robot_state_helper {
		Node { name ur_robot_state_helper 
        Subscribers {
          Subscriber { name 'safety_mode' message 'ur_dashboard_msgs.SafetyMode'},
          Subscriber { name 'robot_mode' message 'ur_dashboard_msgs.RobotMode'}}
        ActionServers {
          ActionServer { name 'set_mode' action 'ur_dashboard_msgs.SetMode'}}}

}}}
